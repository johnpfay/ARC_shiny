[{"name": "app.py", "content": "# App to interactively view lineplots of LDAS variables and malaria case counts\n# This app has three widgets:\n# - LDAS variable selector     [Dropdown]\n# - District (ubigeo) selector [Dropdown]\n# - Offset value               [Slider]\n\n#Import packages\nimport pandas as pd\nfrom pathlib import Path\n#from shiny.express import input, render, ui\nfrom shiny import ui, render, App\n\n#Read in LDAS data (long format)\ndf_LDAS = pd.read_csv(\n    \"https://github.com/johnpfay/ARC_shiny/raw/main/data/processed/Peru_LDAS.csv\",\n    dtype={'ubigeo':'str'},             #Read the ubigeo field as string\n    parse_dates=['EpiweekStartDate']    #Read the EpiweekStartDate as datetime\n).set_index(['ubigeo','EpiweekStartDate','year','week'])\n\n#Read in surveillance data\ndf_surveillance = (\n    pd.read_csv(\n        \"https://github.com/johnpfay/ARC_shiny/raw/main/data/processed/datos_abiertos_vigilancia_malaria_processed.csv\",\n        dtype={'ubigeo':'str'},             #Read the ubigeo field as string\n        parse_dates=['date']                #Read the date field as datetime\n    )\n    .rename(columns={'ano':'year','semana':'week'})\n    .set_index(['ubigeo','date','year','week'])\n)\n\n#Create the LDAS variable list \nvar_list = df_LDAS.columns.to_list() \nvar_list.remove('DataType')\nvar_list.remove('DataType_max')\n\n#Plot function\ndef line_plot(the_var, the_ubigeo, the_offset):\n    #Create the plot title\n    the_title = f\"P. Vivax cases & {the_var} for district {the_ubigeo}: {the_offset} weeks offset\"\n\n    #Set the start and end times\n    start_time = '2010-01-01'\n    end_time = '2024-05-01'\n\n    #Subset for the ubigeo and drop the year and week levels\n    df_LDAS_subset = (\n        df_LDAS\n        .loc[(the_ubigeo)]\n        .loc[slice(start_time,end_time)]\n        .droplevel(['year','week'])\n    )\n\n    #Subset the surveillance data for the ubigeo\n    df_cases_subset = (\n        df_surveillance\n        .loc[(the_ubigeo)]\n        .loc[slice(start_time,end_time)]\n        .droplevel(['year','week'])\n    )\n\n    # Compute the lagged variable\n    df_LDAS_subset['lagged'] = df_LDAS_subset[the_var].shift(the_offset)\n\n    ## Plot the LDAS variable, split into retrospective and forecast components\n    ldas_plot = df_LDAS_subset.query('DataType==\"retrospective\"')['lagged'].plot(\n        ylabel=the_var,color='grey',alpha=0.6,figsize=(15,5),legend=True,title=the_title)\n    df_LDAS_subset.query('DataType==\"forecast\"')['lagged'].plot(ax=ldas_plot,color='red',alpha=0.8,label='Forecast',legend=True)\n\n    #Set the legend\n    ldas_plot.legend([the_var],loc='upper left')\n\n    #Create a shared axis for the surveillance data\n    shared_axis = ldas_plot.twinx()\n    #shared_axis.set_xlim(pd.Timestamp(start_time), pd.Timestamp(end_time))\n\n    #Plot the surveillance data on the same x-axis\n    df_cases_subset['p_vivax'].plot(ax=shared_axis,ylabel='Cases',color='blue',label='P. Vivax',legend=True)\n    shared_axis.legend(loc='upper right')\n\n    #Set the x-limits\n    ldas_plot.set_xlim(pd.Timestamp(start_time), pd.Timestamp(end_time))\n\n##Create app layout\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(   \n        #LDAS selector\n        ui.input_select(\n            id=\"LDAS_select\",\n            label=\"LDAS variable:\",\n            choices=var_list \n        ),\n        #ubigeo selector\n        ui.input_select(\n            id=\"district_select\",  \n            label=\"District ID:\",  \n            choices=list(df_LDAS.index.get_level_values(0).unique())\n        ),\n        #Offset slider\n        ui.input_slider(\"offset_select\", \"Lag time (weeks)\", min=-10, max=10, value=0)\n        )\n    ),\n    ui.panel_main(\n        ui.output_plot(\"line_plot2\")\n    ),  \n)\n     \ndef server(input, output, session):\n    @render.plot(alt=\"A plot\")\n    def line_plot2():\n        #Get inputs\n        the_var = input.LDAS_select()\n        the_ubigeo = input.district_select()\n        the_offset = input.offset_select()\n        the_plot = line_plot(the_var,the_ubigeo,the_offset)\n        return the_plot\n\napp = App(app_ui, server, debug=True)\n\n##-OUTPUT---------------------------------------------\n\n#Render the plot\n'''\n@render.text\ndef value():\n    return f\"{input.LDAS_select()}\"\n\ndef value2():\n    return f\"{input.ubigeo_select()}\"\n\ndef slider_val():\n    return f\"Slider value: {input.val()}\"\n'''", "type": "text"}]